document.addEventListener("DOMContentLoaded", async () => {
    const materialsList = document.getElementById("materials-list");

    if (!materialsList || !window.courseId) return;

    try {
        const response = await fetch(`/api/course_materials/${window.courseId}`);
        const data = await response.json();

        materialsList.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∑–∫–∞..."

        if (data.materials.length === 0) {
            materialsList.innerHTML = "<p class='text-sm text-gray-500'>–§–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</p>";
            return;
        }

        data.materials.forEach(file => {
            const fileLink = document.createElement("a");
            fileLink.href = file.url;
            fileLink.className = "flex items-center text-sm text-gray-600 hover:text-custom";
            fileLink.setAttribute("download", file.name);
            fileLink.innerHTML = `<i class="fas fa-file mr-2"></i>${file.name}`;
            
            materialsList.appendChild(fileLink);
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", error);
        materialsList.innerHTML = "<p class='text-sm text-red-500'>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.</p>";
    }
});


document.addEventListener("DOMContentLoaded", () => {

    const chapterProgress = {
        totalBlocks: document.querySelectorAll('.task-block').length,
        completedBlocks: 0
    };
    // const chapterNav = document.getElementById("chapter-nav");
    // const scrollLeft = document.getElementById("scroll-left");
    // const scrollRight = document.getElementById("scroll-right");

    // //  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID –≥–ª–∞–≤—ã –∏–∑ URL
    // //  const urlParams = new URLSearchParams(window.location.search);
    // //  const currentPageId = urlParams.get("page_id");

    // // –ü–æ–ª—É—á–∞–µ–º `page_id` –∏–∑ URL (–¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–∏–¥–∞ `/course/1/module/3`)
    // const pathSegments = window.location.pathname.split('/');
    // const currentPageId = pathSegments[pathSegments.length - 1]; // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç URL


    //  console.log("üîç –¢–µ–∫—É—â–∏–π page_id –∏–∑ URL:", currentPageId);
 
    //  // –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é –≥–ª–∞–≤—É –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    //  const currentChapter = [...document.querySelectorAll('.chapter-link')]
    // .find(link => Number(link.dataset.page) === Number(currentPageId));
    
    // console.log("üìå –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ç–µ–∫—É—â–∞—è –≥–ª–∞–≤–∞:", currentChapter);

    // document.querySelectorAll('.chapter-link').forEach(link => {
    //     console.log(`üîó –ì–ª–∞–≤–∞: ${link.innerText}, data-page: ${link.dataset.page}`);
    // });
 
    //  if (currentChapter) {
    //      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ JavaScript
    //      currentChapter.classList.add("current-chapter");
    //      currentChapter.style.color = "#1B9AF5"; // –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    //      currentChapter.style.borderBottom = "2px solid #1B9AF5"; // –ì–æ–ª—É–±–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å–Ω–∏–∑—É
    //      currentChapter.style.fontWeight = "600"; // –î–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º
 
    //      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤ –Ω–∞—á–∞–ª–µ
    //      currentChapter.scrollIntoView({
    //          behavior: "smooth",
    //          block: "nearest",
    //          inline: "start"
    //      });
    //  }
 
    //  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    //  function updateScrollButtons() {
    //      scrollLeft.classList.toggle("hidden", chapterNav.scrollLeft === 0);
    //      scrollRight.classList.toggle("hidden", chapterNav.scrollLeft + chapterNav.clientWidth >= chapterNav.scrollWidth);
    //  }
 
    //  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–ª–µ–≤–æ
    //  scrollLeft.addEventListener("click", () => {
    //      chapterNav.scrollBy({ left: -200, behavior: "smooth" });
    //  });
 
    //  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–ø—Ä–∞–≤–æ
    //  scrollRight.addEventListener("click", () => {
    //      chapterNav.scrollBy({ left: 200, behavior: "smooth" });
    //  });
 
    //  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    //  chapterNav.addEventListener("scroll", updateScrollButtons);
 
    //  // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    //  updateScrollButtons();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∫–∞–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –≥–ª–∞–≤–µ
    function updateChapterProgress() {
        const progressPercentage = Math.round((chapterProgress.completedBlocks / chapterProgress.totalBlocks) * 100);
        document.getElementById('chapter-progress').textContent = `${progressPercentage}% –ü—Ä–æ–π–¥–µ–Ω–æ`;
        document.getElementById('chapter-progress-bar').style.width = `${progressPercentage}%`;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    document.querySelectorAll("[data-toggle-input]").forEach(button => {
        button.addEventListener("click", () => {
            // –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —Å–∫—Ä—ã—Ç—ã–π –±–ª–æ–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ
            const inputBlock = button.closest("div").nextElementSibling;
            if (inputBlock.classList.contains("hidden")) {
                inputBlock.classList.remove("hidden");
            } else {
                inputBlock.classList.add("hidden");
            }
        });
    });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
        document.addEventListener("click", async (event) => {
            if (event.target.classList.contains("next-button")) {
                event.preventDefault();
    
                // –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
                const taskBlock = event.target.closest('.task-block');
                if (!taskBlock) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º '.task-block'.");
                    return;
                }
    
                // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                const isTestCorrect = handleTestCheck(taskBlock);

                const isTextValid = validateTextFields(taskBlock);

                if (!isTextValid) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.");
                    return;
                }
                const isTextCorrect = await handleTextCheck(taskBlock);

                chapterProgress.completedBlocks++;
                updateChapterProgress();
    
                // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
                const nextBlockId = event.target.getAttribute("data-next");
                const nextBlock = document.getElementById(nextBlockId);
    
                if (nextBlock) {
                    nextBlock.classList.remove("hidden");
    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
                    nextBlock.scrollIntoView({
                        behavior: "smooth", // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                        block: "center"    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –±–ª–æ–∫ –≤ —ç–∫—Ä–∞–Ω–µ
                    });
                } else {
                    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–ª–∞–≤–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!"
                    const chapterCompletedMessage = document.getElementById("chapter-completed");
                    if (chapterCompletedMessage) {
                        chapterCompletedMessage.classList.remove("hidden");
    
                        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é "–ì–ª–∞–≤–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!"
                        chapterCompletedMessage.scrollIntoView({
                            behavior: "smooth", // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                            block: "center"    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        });
                    }
                }
                event.target.disabled = true;
            }
        });
    
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        document.addEventListener("click", async (event) => {
            if (event.target.classList.contains("check-answers")) {
                event.preventDefault();
    
                const taskBlock = event.target.closest('.task-block');
                if (!taskBlock) {
                    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º '.task-block'.");
                    return;
                }
    
                // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
                const isTestCorrect = handleTestCheck(taskBlock);
                const isTextCorrect = await handleTextCheck(taskBlock);
    
                // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º (theory)
                generateExplanationBlock(taskBlock, isTestCorrect && isTextCorrect);
            }
        });
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤
        function handleTestCheck(taskBlock) {
            let isAllCorrect = true;
            const testInputs = taskBlock.querySelectorAll('input[type="checkbox"]');
    
            testInputs.forEach(input => {
                const isChecked = input.checked;
                const correctAnswer = input.dataset.answer === '+';
    
                let result = input.nextElementSibling;
                if (!result || !result.classList.contains('check-result')) {
                    result = document.createElement('span');
                    result.className = 'check-result ml-2 text-sm font-semibold';
                    input.parentElement.appendChild(result);
                }
    
                if (isChecked === correctAnswer) {
                    result.textContent = '‚úî –ü—Ä–∞–≤–∏–ª—å–Ω–æ!';
                    result.style.color = 'green';
                } else {
                    result.textContent = '‚úò –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ';
                    result.style.color = 'red';
                    isAllCorrect = false;
                }
            });
    
            return isAllCorrect;
        }
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å)
        function validateTextFields(taskBlock) {
            const textAreas = taskBlock.querySelectorAll('textarea');
            for (const textArea of textAreas) {
                if (!textArea.value.trim()) {
                    return false; // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
                }
            }
            return true; // –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
        async function handleTextCheck(taskBlock) {
            let isAllCorrect = true;
            const textAreas = taskBlock.querySelectorAll('textarea');
    
            for (const textArea of textAreas) {
                const userAnswer = textArea.value.trim();
                const correctAnswer = textArea.dataset.answer.trim();
    
                if (!userAnswer) {
                    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π.");
                    isAllCorrect = false;
                    continue;
                }
    
                try {
                    const response = await fetch("/api/check_text_answer", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            user_answer: userAnswer,
                            correct_answer: correctAnswer,
                            task_title: taskBlock.querySelector('h2').textContent,
                        }),
                    });
    
                    const result = await response.json();
                    let commentElement = textArea.nextElementSibling;
    
                    if (!commentElement || !commentElement.classList.contains('check-result')) {
                        commentElement = document.createElement('span');
                        commentElement.className = 'check-result mt-2 block text-sm font-semibold';
                        textArea.insertAdjacentElement('afterend', commentElement);
                    }
    
                    if (result.comment) {
                        commentElement.style.color = result.correct ? 'green' : 'red';
                        commentElement.textContent = result.comment;
                        if (!result.correct) isAllCorrect = false;
                    } else {
                        commentElement.textContent = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞.";
                        commentElement.style.color = 'black';
                        isAllCorrect = false;
                    }
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
                    isAllCorrect = false;
                }
            }
    
            return isAllCorrect;
        }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ API
    async function generateExplanationBlock(taskBlock, isCorrect) {

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        const explanationBlock = document.createElement('div');
        explanationBlock.className = 'bg-blue-100 rounded-lg shadow-sm p-6 mb-6 explanation-block';
        explanationBlock.innerHTML = `
            <h3 class="text-lg font-semibold text-gray-900 mb-4">–†–∞–∑–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è</h3>
        <p>–ì–µ–Ω–µ—Ä–∏—Ä—É—é...</p>
        `;

        taskBlock.insertAdjacentElement('afterend', explanationBlock);

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é
        explanationBlock.scrollIntoView({
            behavior: "smooth",
            block: "center",
        });

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        const taskTitle = taskBlock.querySelector('h2').textContent.trim();
        const testAnswers = Array.from(taskBlock.querySelectorAll('input[type="checkbox"]')).map(input => ({
            condition: input.parentElement.textContent.trim(),
            userAnswer: input.checked,
            correctAnswer: input.dataset.answer === '+'
        }));

        const textAnswers = Array.from(taskBlock.querySelectorAll('textarea')).map(textArea => ({
            userAnswer: textArea.value.trim(),
            correctAnswer: textArea.dataset.answer.trim()
        }));

        // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        try {
            const response = await fetch("/api/generate_explanation", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    task_title: taskTitle,
                    is_correct: isCorrect,
                    test_answers: testAnswers,
                    text_answers: textAnswers,
                }),
            });

            const result = await response.json();

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
            explanationBlock.innerHTML = `
                <h3 class="text-lg font-semibold text-gray-900 mb-4">–†–∞–∑–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è</h3>
                <p>${result.explanation || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è."}</p>
            `;

            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é
            explanationBlock.scrollIntoView({
                behavior: "smooth",
                block: "center",
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:", error);

            const errorBlock = document.createElement('div');
            errorBlock.className = 'bg-red-100 rounded-lg shadow-sm p-6 mb-6';
            errorBlock.innerHTML = `
                <h3 class="text-lg font-semibold text-red-900 mb-4">–û—à–∏–±–∫–∞</h3>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
            `;
            taskBlock.insertAdjacentElement('afterend', errorBlock);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ theory
    async function generateBlock(question, inputBlock) {
        const contextBlock = inputBlock.closest(".bg-white");
        const context = contextBlock.querySelector(".prose")?.textContent.trim() || "";

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±–ª–æ–∫
        const newBlock = document.createElement("div");
        newBlock.classList.add("bg-white", "rounded-lg", "shadow-sm", "p-6", "mb-6");
        newBlock.innerHTML = `
            <h3 class="text-lg font-semibold text-gray-900 mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–ª–æ–∫—É</h3>
            <p>–ì–µ–Ω–µ—Ä–∏—Ä—É—é...</p>
        `;
        contextBlock.parentNode.insertBefore(newBlock, contextBlock.nextSibling);

        try {
            const response = await fetch("/api/generate_block", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ question, context }),
            });

            if (response.ok) {
                const data = await response.json();
                if (data.title && data.content) {
                    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±–ª–æ–∫
                    newBlock.innerHTML = `
                        <h2 class="text-lg font-semibold text-gray-900 mb-4">${data.title}</h2>
                        <div class="prose max-w-none text-gray-700">
                            <p>${data.content}</p>
                        </div>
                    `;

                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é
                    newBlock.scrollIntoView({
                        behavior: "smooth",
                        block: "center",
            });
                } else {
                    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.");
                }
            } else {
                
                alert("–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:", error);
        }
    }

    document.addEventListener("click", event => {
        if (event.target.classList.contains("submit-question")) {
            event.preventDefault();

            const inputBlock = event.target.closest(".input-block");
            const inputField = inputBlock.querySelector("input");

            if (inputField && inputField.value.trim()) {
                const question = inputField.value.trim();
                generateBlock(question, inputBlock);
                inputField.value = ""; // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
            } else {
                alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!");
            }
        }
    });

    document.addEventListener("keydown", event => {
        if (event.key === "Enter" && event.target.closest(".input-block")) {
            event.preventDefault();

            const inputBlock = event.target.closest(".input-block");
            const inputField = inputBlock.querySelector("input");

            if (inputField && inputField.value.trim()) {
                const question = inputField.value.trim();
                generateBlock(question, inputBlock);
                inputField.value = ""; // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞
            } else {
                alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!");
            }
        }
    });

});